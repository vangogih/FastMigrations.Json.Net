name: tests

on:
  push:
    branches:
      - "github_actions"
  pull_request:
    branches:
      - "github_actions"

jobs:
  test-dotnet:
    runs-on: ubuntu-latest
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      NUGET_XMLDOC_MODE: skip
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 5.0.x
      - run: dotnet test -c Debug ./FastMigrations.StandaloneTests
  
  test-unity:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        unityVersion:
          #- 2019.4.40f1
          #- 2020.3.48f1
          #- 2021.3.36f1
          #- 2022.3.22f1
          - 2023.2.15f1
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cache Unity Library
        uses: actions/cache@v3
        with:
          path: FastMigrations.Unity/Library
          key: Library-FastMigrations-${{ matrix.unityVersion }}
          restore-keys: |
            Library-FastMigrations-
            Library-

      - name: Unity Test Runner
        uses: game-ci/unity-test-runner@v4
        id: unity-test
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: ./FastMigrations.Unity
          unityVersion: ${{ matrix.unityVersion }}
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          testMode: editmode
          coverageOptions: 'generateAdditionalMetrics;generateHtmlReport;generateBadgeReport;assemblyFilters:FastMigrations.Runtime.*'

      - name: Upload test result artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.unityVersion }}
          path: ${{ steps.unity-test.outputs.artifactsPath }}

      - name: Upload coverage result artifacts
        uses: actions/upload-artifact@v3
        if: matrix.unityVersion == '2023.2.15f1'
        with:
          name: coverage-results
          path: ${{ steps.unity-test.outputs.coveragePath }}
  
  coverage-results-deploy:
    needs: [ test-unity ]
    permissions:
      contents: read
      pages: write
      id-token: write
    concurrency:
      group: "pages"
      cancel-in-progress: false
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    timeout-minutes: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: List Artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}      
        run: |
            curl \
              -H "Authorization: token ${GITHUB_TOKEN}" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}/artifacts"

      - name: Download tests coverage results
        uses: dawidd6/action-download-artifact@v3
        with:
          run_id: ${{ github.event.workflow_run.id }}
          name: coverage-results

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./coverage-results/Report

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4